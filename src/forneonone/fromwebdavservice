

export class GetRequestError extends Error {
  get userMessage() {
    if (typeof this.statusErr === "number") {
      if (this.statusErr === 404) {
        return `The file ${this.path} could not be found.`;
      }
      if (this.statusErr.toString()[0] === "5") {
        return `The microcontroller failed to load the file ${this.path}.`;
      }
    } else {
      return `The file ${this.path} could not be loaded. It may be corrupted.`;
    }
    return `The file ${this.path} could not be loaded.`;
  }

  constructor(public readonly path: string, private statusErr: any) {
    super(`GET: ${path} returned status code or error: ${statusErr}.`); // 'Error' breaks prototype chain here
    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
  }
}

export function getRequestFileNotFound(path: string): GetRequestError {
  return new GetRequestError(path, 404);
}

export function statusCodeToError(
  path: string,
  status: number
): GetRequestError | null {
  if (status.toString()[0] !== "2") return new GetRequestError(path, status);
  return null;
}

export function errorToError(path: string, err: any): GetRequestError {
  return new GetRequestError(path, err);
}

  findBinaryFile(
    path: string,
    { progress, ...rest }: WebdavProgressOptions = {}
  ) {
    const { progressDownload, requestPromise } = this.ajax({
      downloadProgress: progress,
      method: "GET",
      url: `${this.url}${path}`,
      arrayBufferResponse: true,
      ...rest
    });
    if (progressDownload) {
      this.downloadProgressStatus.postProgress(progressDownload);
    }
    return requestPromise
      .then(({ status, arrayBuffer }) => {
        if (status !== 404 && status.toString()[0] !== "2") {
          console.warn("GET", path, "status code", status);
        }
        return (
          statusCodeToError(path, status) || {
            status,
            data: new Uint8Array(arrayBuffer)
          }
        );
      })
      .catch(e => {
        console.warn("GET", path, "error", e);
        return errorToError(path, e);
      });
  }